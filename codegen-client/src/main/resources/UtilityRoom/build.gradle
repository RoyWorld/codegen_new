apply plugin: 'java'
apply plugin: 'application'
apply plugin: "sonar-runner"

apply from: 'dependencies.gradle'
sourceCompatibility = 1.8

//删除父目录下的test，避免test task执行失败
delete "${r"${buildDir}/classes/test"}"


buildscript {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    }
    dependencies {
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.4'
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1+'
    }
}

tasks.withType(Compile) {
    options.encoding = "UTF-8"
}

/** 此闭包内的声明子类皆可使用 */
allprojects {
    group = '${basepackage}'
    version = '1.1.0-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'maven-publish-auth'

    repositories {
        repositories {
            maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        }

        mavenLocal()
        mavenCentral()
    }

    publishing {
        task sourceJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        publications {
            mavenJava(MavenPublication) { from components.java }
            mavenJava(MavenPublication) {
                artifact(sourceJar) {
                    classifier = "sources"
                }
            }
        }
    }

}

//拷贝根目录下的所有test到各自子module下
task "copytest" << {
    def fromPath
    def toPath
    subprojects.each {
        fromPath = "${r"${project.buildDir}/classes/test/${it.name}"}"
        toPath = "${r"${it.buildDir}/classes/test"}"

        copy {
            from fromPath
            into toPath
        }

    }
}

task createREADME() {
    file("README.md").createNewFile()
}

subprojects {

    task "createJavaProject" << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }

        /** 可选生成子文件夹 */
//        file("src/main/filters").mkdirs()
//        file("src/main/assembly").mkdirs()
//        file("src/main/config").mkdirs()
//        file("src/main/scripts").mkdirs()

        /** 填充文件，便于git提交 */
        file("src/main/java/${basepackage_dir}").mkdirs()
        file("src/main/java/${basepackage_dir}/package-info.java").createNewFile()
        file("src/main/resources").mkdirs()
//        file("src/main/resources/spring.xml").createNewFile()

        file("src/test/java/${basepackage_dir}").mkdirs()
        file("src/test/java/${basepackage_dir}/package-info.java").createNewFile()
//        file("src/test/resources/spring.xml").createNewFile()
    }

    /** 有时候会报错，但需要执行 */
    task createREADME() {
        file("README.md").createNewFile()
    }

    configurations {
        compile.extendsFrom provided

        all*.exclude group: 'org.springframework', module: 'spring'
        all*.exclude group: 'asm', module: 'asm'
        //排除log4j桥接，只允许使用logback
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'

//        all*.exclude group: 'org.apache.poi'
        all*.exclude group: 'com.easypoi'
        all*.exclude group: 'org.codehaus.jackson'
        all*.exclude group: 'org.springframework', module: 'spring-test'
//        all*.exclude group: 'org.apache.qpid'
//        all*.exclude group: 'com.ksyun'
        all*.exclude group: 'org.freemarker.freemarker'
        all*.exclude group: 'org.junit'
        all*.exclude group: 'org.jboss.netty'
        all*.exclude group: 'org.apache.commons',module:'commons-collections'
//        all*.exclude group: 'org.apache.commons',module:'commons-fileupload'
    }

}

configure(subprojects.findAll { it.name.contains('-service') }) {
    task createServiceProject(dependsOn: 'createJavaProject') << {

        /** 配置生成 */
        file("src/main/resources/config").mkdirs()
        file("src/main/resources/config/main-conf.properties").createNewFile()
        file("src/main/resources/config/metadata.properties").createNewFile()
    }

}

configure(subprojects.findAll { it.name.contains('war') }) {
    apply plugin: 'war'

    task createWebProject(dependsOn: 'createJavaProject') << {
        def webAppDir = file("$webAppDirName")
        webAppDir.mkdirs()

        file("src/main/resources/config").mkdirs()
        file("src/main/resources/config/main-conf.properties").createNewFile()
        file("src/main/resources/config/metadata.properties").createNewFile()
    }

}





